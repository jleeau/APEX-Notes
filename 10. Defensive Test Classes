DEFENSIVE TEST CLASSES

System.assertEquals()
- A method to check if two values are equal.
- Expectations vs. reality. Set what outcome you think it will be.
- ONLY used in test classes. Should have at least one assertion in each test class.
- Needs SOQL to get the most up-to-date information on the records as updated by the trigger. Acts like a memory refresh.
- Stops code from deploying if assertions do not pass. Fails the entire test class.
- System.asserttEquals(input1, input2, input3);
    - input1 - Expected value
    - input2 - The reality, the unknown value that you hope will be equal
    - input3 - The message to display if actual value != expected value
        
- E.g.
    System.assertEquals('Marc Benioff', benioff.Name);  //Pass
    System.assertEquals('Amazon', benioff.Account.Name, 'Do you live under a rock?!');  //Fail
    System.assertEquals(30, benioff.Millionaire_age__c);    //Fail
    System.assertEquals('Apple', benioff.Former_Employer__c);   //Pass
    System.assertEquals(true, benioff.Invented_The_App_Store__c);   //Pass
        
- E.g. Trigger + Test Class
        trigger NewStatus on Lead (before insert) {
            for (Lead myLead : Trigger.new) {
                myLead.Status = 'New';
            }
        }
        
        @isTest
        private class newStatusTest {
            static testMethod void createLead() {
                Lead myLead = new Lead();
                myLead.FirstName = 'Jon';
                myLead.LastName = 'Snow';
                myLead.Company = 'Winterfell Hotels';
                insert myLead
                
                Lead latestLead = [SELECT Status FROM Lead WHERE Id = :myLead.Id];      
                //Need SOQL to get the LATEST value of Status.
                //WITHOUT SOQL, it will insert a new lead, and then check the Status, which is NULL.
                //WITH SOQL, it will insert a new lead, trigger Status = 'New', query Status, then assert it.
                
                System.assertEquals('New', latestLead.Status);      //Checks if trigger works. Has value to us.
            }
        }
        

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


TESTING IN SALESFORCE
- How to build a comprehensive shield for the whole org?
- For each trigger, there is a test class (scenario), which has an assertion.
- Assertions are Admin Commandments; it is global God rule which cannot be broken.


THE DEPLOYMENT LIFE CYCLE
- Production Org : All active users.
- Full Sandbox : Exact copy of production including data.
- Developer Sandbox : Production copy that has very little data.

- Multiple developers create their own Triggers and test classes in Developer Sandbox.
  Then they push it to sandbox. If any developer breaks other people's commandments, it will be captured when all tests are run.
  When pushing from sandbox to production, all test classes will be run against a tiny trigger.
  Assertions make sure the Commandments will not be broken.


FAILED DEPLOYMENT
- Sandbox-to-sandbox deployment is unrestricted, but all tests are run to production.
- If a single assertion fails, nothing is deployed.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PRACTICE PROJECTS

PROJECT 1. Write a trigger that sets a case status to "closed" if there are more than 2 cases created THAT DAY
    associated with the SAME CONTACT.
    Also, CLOSE the case if there are MORE THAN 3 CASES created on that account that day.


//PROJECT 1 TRIGGER
trigger TooManyCases on Case (before insert) {
	List<Case> casesToCheck = new List<Case>();		//holds all trigger cases
    List<Case> checkContact = new List<Case>();		//holds all contact's cases		
    List<Case> checkAccount = new List<Case>();		//holds all account's cases
    
    for (Case myCase : Trigger.new) {
        //Prepare bind variables
        Id caseContactId = myCase.ContactId;
        Id caseAccountId = myCase.AccountId;
        System.debug(myCase.Id + ' entered. ContactId: ' + myCase.ContactId
                    + ', AccountId: ' + myCase.AccountId);
        
        //SOQL all the cases associated with either the contact or account.
        casesToCheck = [SELECT Id,
                        	   AccountId,
                        	   ContactId
                          FROM Case
                         WHERE CreatedDate = LAST_N_DAYS:1		//Today
                           AND (Contact.Id =:caseContactId
                        	OR Account.Id =:caseAccountId)];		
        System.debug('Cases found: ' + casesToCheck.size() + '. ' + casesToCheck
                     + ' ' + myCase.CreatedDate);
        
        for (Case c : casesToCheck) {
            if (c.ContactId == caseContactId && checkContact.size() <= 2) {
                checkContact.add(c);
            }
            if (c.AccountId == caseAccountId && checkAccount.size() <= 3) {
                checkAccount.add(c);
            }
        }
        System.debug('Contact cases found: ' + checkContact.size());
        System.debug('Account cases found: ' + checkAccount.size());

        
        //Count number of cases found. If > 2, set myCase to closed.
        if (checkContact.size() > 2 || checkAccount.size() > 3) {		//If either contact/account has > 3 cases, close.
            myCase.Status = '8. Closed';
        }
        System.debug('The case\'s status is: ' + myCase.Status);
    }
}


//PROJECT 2
- On creation of an opportunity, add the opportunity OWNER's manager as an opportunity team member, with role 'Sales Manager'.
- If the opportunity owner is him/herself a manager, add one of their direct employees as a 'Sales Rep' opportunity team member.


//PROJECT 3 Trigger
- Trigger that sets the contact owner to whomever most recently created a case on the record. 
- In the same trigger, set the account owner to whomever most recently created a case on it.


trigger CaseContactOwner on Case (after insert) {		//after insert to grab the current caseId
    
    for (Case myCase : Trigger.new) {					//for every case that enters,
        if (myCase.ContactId != null) {					//Check if current contact Id is not null
            Contact myCon = [SELECT Name, Account.Id, Id			//Look up the contact for that case
                               FROM Contact
                              WHERE Id = :myCase.ContactId];
            
        
            myCon.OwnerId = myCase.CreatedById;				//Set Contact Owner to Case Creator
            update myCon;
        }
        //Query the Account for that case.
        if (myCase.AccountId != null) {
            Account myAcc = [SELECT Id
                           	   FROM Account
                              WHERE Id = :myCase.AccountId];
            
			//Set Account's owner to created by Id.
			myAcc.OwnerId = myCase.CreatedById;
            update myAcc;
        }
    }
}

//PROJECT 3 Test Class

@isTest
public class CaseContactOwnerTest {
    @isTest static void createCase() {
        //Create users
        User myUser = new User();
        myUser.FirstName = 'Pippi';
		myUser.LastName = 'Longstockings';
        myUser.Email = 'pippi@longstockings.com';
        myUser.Username = 'piplong';
        myUser.Alias = 'plong';
        myUser.ProfileId = [SELECT Id
                            FROM Profile
                            WHERE Name = 'System Adminisrator'].Id;			//WHOA YOU CAN ACCESS ID OUTSIDE A SOQL QUERY.

        myUser.ManagerId = null;
		insert myuser;
		
        //Create account
        Account acc = new Account();
        acc.Name = 'Green Gables';
        acc.OwnerId = myUser.Id;
        insert acc;
        
        //Create case
        Case myCase = new Case();
        myCase.Subject = 'Poopy';
        myCase.AccountId = acc.Id;
        insert myCase;
        
        //Lookup updated account
        Account updatedAcc = [SELECT OwnerId
                             FROM Account
                             WHERE Id = :acc.Id];
        
        System.assertEquals(UserInfo.getUserId(), updatedAcc.ownerId);
    }
}


//PROJECT 4 TRIGGER
- When account phone no. updated, all related contacts' "Other Phone" is updated to this number.
- Do not update if the country doesn't match.

//When account phone no. updated, all related contacts' "Other Phone" is updated to this number.
//Do not update if the country doesn't match.

trigger UpdateAllContacts on Account (before update) {
    for(Id accId : Trigger.newMap.keySet()) {
        String oldPhone = Trigger.oldMap.get(accId).Phone;
        String newPhone = Trigger.newMap.get(accId).Phone;
        List<Contact> changeContacts = new List<Contact>();
        
        if(oldPhone != newPhone) {		//If Phone number was changed
     		System.debug('Number was changed from ' + Trigger.oldMap.get(accId).Phone
                    	+ ' to ' + Trigger.newMap.get(accId).Phone + '.');
            
            //Find all contacts under that account
            List<Contact> myCon = [SELECT Id, Phone, Name
                            		 FROM Contact
                            		WHERE Account.Id = :accId];
            System.debug(myCon);
            
            //Change all contacts' phone number
            for (Contact c : myCon) {
                c.Phone = newPhone;
                changeContacts.add(c);
                System.debug(c.Name + '\'s number was changed.');
            }
            update changeContacts;
        } else {
            System.debug('Phone was not changed.');
        }
	}
}

//PROJECT 4 TEST CLASS

@isTest
public class UpdateAllContactsTest {
    @isTest static void updateContact() {
        //Create RecordType id;
        Map <String,Schema.RecordTypeInfo> recordTypeMap = Account.sObjectType.getDescribe().getRecordTypeInfosByName();
        
        //Create Client
        Account client = new Account();
        client.Name = 'TestClient';
        client.CurrencyIsoCode = 'USD';
        if (recordTypeMap.containsKey('Client')) {
        	client.RecordTypeId = recordTypeMap.get('Client').getRecordTypeId();
        }
        insert client;
        System.debug('Created Client: ' + client.Name);
        
        //Create LP
        Account lp = new Account();
        lp.Name = 'TestLPName';
        lp.CurrencyIsoCode = 'USD';
        lp.Phone = '100000';
        if (recordTypeMap.containsKey('Local Partner')) {
        	lp.RecordTypeId = recordTypeMap.get('Local Partner').getRecordTypeId();
        }
      	insert lp;
		System.debug('Created LP: ' + lp.Name);
		
        //Create Contact
        Contact myCon = new Contact();
        myCon.FirstName = 'Teamo';
        myCon.LastName = 'Supremo';
        myCon.CurrencyIsoCode = 'USD';
        myCon.Account_name__c = lp.Id;
        myCon.Phone = '0451';
        insert myCon;
        System.debug('Created Contact: ' + myCon.FirstName + ' ' + myCon.LastName);
        
        //Testing Scenario: Account number is updated.
        String oldVal = lp.Phone;
        lp.Phone = '99999';
        update lp;
        
        Contact updatedContact = [SELECT Id, Phone
                        		  FROM Contact
                        		  WHERE Id = :myCon.Id LIMIT 1];
        
        String newVal = updatedContact.Phone;
        System.assertNotEquals(oldVal, newVal);
        
    }
}


PROJECT 5: MOVE ACCOUNTS TRIGGER
//For new contacts, if there's an account website matching the contact's email domain, assign contact to that account.

trigger MoveAccounts on Contact (before insert) {

    for (Contact c : Trigger.new) {
        //Isolate contact email domain
        String domain = (c.Email.split('.com').get(0)).split('@').get(1);
        System.debug(domain);		//snow
        String searchString = '%' + domain + '%';
        System.debug(searchString);
        
        //Lookup account's w/ that website domain
        List<Account> matchAcc = [SELECT Id, Name, Website
                              		FROM Account
                             		WHERE Website LIKE :searchString
                                 	LIMIT 1];
        System.debug(matchAcc);
        //Update to matching account
        c.AccountId = matchAcc.get(0).Id;
    }
}


PROJECT 5 TEST CLASS

@isTest
public class MoveAccountsTest {

    @istest static void createContact() {
        //Create RecordType id;
        Map <String,Schema.RecordTypeInfo> recordTypeMapAcc = Account.sObjectType.getDescribe().getRecordTypeInfosByName();
        Map <String,Schema.RecordTypeInfo> recordTypeMapCon = Contact.sObjectType.getDescribe().getRecordTypeInfosByName();
        
        //Create Client
        Account client = new Account();
        client.Name = 'TestClient';
        client.CurrencyIsoCode = 'USD';
        client.Website = 'www.snow.com.eu';
        if (recordTypeMapAcc.containsKey('Client')) {
        	client.RecordTypeId = recordTypeMapAcc.get('Client').getRecordTypeId();
        }
        insert client;
        System.debug('Created Client: ' + client.Name);
        
        //Create Employee
        Contact myContact = new Contact();
        myContact.AccountId = '0010l000006v6LS';
        if (recordTypeMapCon.containsKey('GEO Employee')) {
          myContact.RecordTypeId = recordTypeMapCon.get('GEO Employee').getRecordTypeId();
        }
        myContact.RecordTypeId = '01290000001IDUD';
        myContact.FirstName = 'Jon';
        myContact.LastName = 'Snow';
        myContact.Email = 'jon@snow.com';
        myContact.CurrencyIsoCode = 'USD';
        
        insert myContact;
        System.debug('Created Contact: ' + myContact.FirstName + ' ' +myContact.LastName);
        
        //Assertions
        Contact checkContact = [SELECT Id, AccountId
                               FROM Contact
                               WHERE Id = :myContact.Id];
        System.assertEquals(client.Id, checkContact.AccountId, 'Assertion failed: ' + checkContact.AccountId);
        
    }
}
