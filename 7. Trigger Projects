//OPPORTUNITY PRICE WARS TRIGGER
//Automatically identifies the Opportunity's competitor offering the highest price.
//Find competitor with highest price, then populate the 'Leading Competitor' field with that Competitor.
//Also populates the competitor prices.


trigger LeadingCompetitor on Opportunity (before insert, before update) {
    
    for (Opportunity opp : Trigger.new) {
        List<Decimal> competitorPrices = new List<Decimal>();
        competitorPrices.add(opp.Competitor_1_Price__c);
        competitorPrices.add(opp.Competitor_2_Price__c);
        competitorPrices.add(opp.Competitor_3_Price__c);
        
        List<String> competitors = new List<String>();
        competitors.add(opp.Competitor_1__c);
        competitors.add(opp.Competitor_2__c);
        competitors.add(opp.Competitor_3__c);
        
        //use a for-loop to keep track of iterator
        //Store each price as highestPrice and compare it to each competitor's price in loop
        Decimal highestPrice;
        Integer highestPricePosition;
        for (Integer i = 0; i < competitorPrices.size(); i++) {
            Decimal currentPrice = competitorPrices.get(i);
            if (highestPrice == null || currentPrice > highestPrice) {
                highestPrice = currentPrice;		//Finds highest price
                highestPricePosition = i;		//Sets highest price position
            }
        }
        
        //Populate the leading competitor field with the competitor matching the highest price position
        opp.Leading_Competitor__c = competitors.get(highestPricePosition);
		opp.Competitor_Price__c = competitorPrices.get(highestPricePosition);
    }

}


//OPPORTUNITY PRICE WARS TEST CLASS
//To start a test class, try to find all conditionals required to start it.

@isTest
private class LeadingCompetitorTest {
    
    @isTest static void createOppWithCompetitors() {
        //Create or update an opportunity
        Opportunity opp = new Opportunity();
        opp.Name 		= 'Big Deal';
        opp.CloseDate   = Date.today();
        opp.StageName   = 'Prospecting';
        
        //Populate all 3 competitor price fields
        opp.Competitor_1_Price__c = 5000;
        opp.Competitor_2_Price__c = 1500;
        opp.Competitor_3_Price__c = 25000;
        
        //Populate all 3 competitor fields
        opp.Competitor_1__c = 'Amazon';
        opp.Competitor_2__c = 'Google';
        opp.Competitor_3__c = 'Microsoft';
        
        insert opp;
        System.debug('Opportunity ' + opp.Name + ' inserted with all competitor fields populated.');
    }
	
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//SECRET INFORMATION TRIGGER
//Check if a case has any of the following keywords:
	- Credit Card
	- Social Security
	- SSN
	- Passport
//If it does have secret information:
	- Create a child case
	- Describe the situation
	- Escalate it
	- Mark as 'High Priority'
	
	
//Use after insert because 1. child case is not in Trigger.new, 2. need to get case Id to associate.
//In the escalation case description (on child record), lists out only the sensitive keywords found in the original case.

trigger CheckSecretInformation on Case (after insert, before update) {
    
    String childCaseSubject = 'Warning : Parent case may contain secret info';
    
    //Add secret words to a collection (set)
    Set<String> secretKeywords = new Set<String>();
    secretKeywords.add('Credit Card');
    secretKeywords.add('Social Security');
    secretKeywords.add('SSN');
    secretKeywords.add('Passport');
    secretKeywords.add('Bodyweight');
    
    //Check to see if case contains any secret keywords
    List<Case> casesWithSecretInfo = new List<Case>();
    List<String> keywordsFound = new List<String>();
    
    for (Case myCase : Trigger.new) {
        if (myCase.Subject != childCaseSubject) {		//Excludes child cases from infinitely entering the trigger
            for (String keyword : secretKeywords) {
                if (myCase.Description != null && myCase.Description.containsIgnoreCase(keyword)) {
                    System.debug('Case ' + myCase.Id + ' includes secret keyword ' + keyword);
                    //break;		break out if even one Keyword is present.
                    keywordsFound.add(keyword);		//Records all keywords found in description.
                }
        	}
            if (keywordsFound.size() > 0) {
				casesWithSecretInfo.add(myCase);   
            }	
            		//Add the case 
        }
    }
    
    String keywordString = '';
    for (Integer i = 0; i < keywordsFound.size(); i++) {
        keywordString += keywordsFound[i] + ', ';
    }
    
    //If case contains a secret keyword, create a child case
    List<Case> casesToCreate = new List<Case>();
    for (Case caseWithSecretInfo : casesWithSecretInfo) {
        Case childCase 		  = new Case();
        childCase.subject     = childCaseSubject;
        childCase.ParentId    = caseWithSecretInfo.Id;
        childCase.Priority    = 'High';
        childCase.Description = 'The following keywords were found: ' + keywordString;
        casesToCreate.add(childCase);
    }
    insert casesToCreate;		//bulkify the trigger
    System.debug('Cases inserted: ' + casesToCreate);
    
}


//SECRET INFORMATION TEST CLASS
//In all test classes, you need DML because nothing happens otherwise.

@isTest
private class CheckSecretInformationTest {
    
    @isTest static void createCaseWithSecretInfo() {
        //create/update a case
        Case myCase = new Case();
        myCase.Subject = 'Help!';
        myCase.Description = 'My bodyweight';
        insert myCase;
        
        System.debug('Case ' + myCase.Id + ' created with description ' + myCase.Description);

    }

}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//PROJECT 1: FIX WARRANTY SUMMARY TRIGGER
//Deals with null exceptions for warranty information.

trigger WarrantySummary on Case (before insert) {
    for(Case myCase : Trigger.new) {
        String createdDate 			= DateTime.now().format();
        Boolean hasExtendedWarranty = myCase.Product_Has_Extended_Warranty__c;
        
        String purchaseDate = '';
        Integer warrantyDays = 0;
        Decimal warrantyPercentage = 0;

        
        if (myCase.Product_Purchase_Date__c != null) {
            purchaseDate 	= myCase.Product_Purchase_Date__c.format();
            
            if (myCase.Product_Total_Warranty_Days__c != null) {   
                warrantyDays 	= myCase.Product_Total_Warranty_Days__c.intValue();
                warrantyPercentage  = (100 * (myCase.Product_Purchase_Date__c.daysBetween(Date.today()) 
                                              / myCase.Product_Total_Warranty_Days__c)).setScale(2);
            } else {
                warrantyDays	= 0;
                warrantyPercentage = 0;
            }   
        } else if (myCase.Product_Total_Warranty_Days__c != null) {
            purchaseDate = 'Unknown';
            warrantyDays = myCase.Product_Total_Warranty_Days__c.intValue();
            warrantyPercentage = 0;
        } else {
            purchaseDate = 'Unknown';
            warrantyDays	= 0;
			warrantyPercentage = 0;
        }
        
        
        
        myCase.Warranty_Summary__c  = 'Product purchased on ' + purchaseDate + ' '
            						+ 'and case created on ' + createdDate + '.' + '\n'
            						+ 'Warranty is for ' + warrantyDays + ' '
            						+ 'days and is ' + warrantyPercentage + '% through its warranty period.\n'
            						+ 'Extended warranty: ' + hasExtendedWarranty + '\n'; 
        System.debug(myCase.Warranty_Summary__c);
    }
}


//PROJECT 1: FIX WARRANTY SUMMARY TEST CLASS

@istest
public class WarrantySummaryTest {
    @istest static void createCase() {
        //Case 1
        Case newCase1 = new Case();
        //newCase1.Product_Purchase_Date__c 	   = Date.newInstance(2017, 08, 24);
        //newCase1.Product_Total_Warranty_Days__c = 30;
        newCase1.Status 						   = '1. New';
        insert newCase1;
        
        //Case 2
        Case newCase2 = new Case();
        newCase2.Product_Purchase_Date__c 	   = Date.newInstance(2017, 08, 24);
        //newCase2.Product_Total_Warranty_Days__c = 30;
        newCase2.Status 						   = '1. New';
        insert newCase2;
        
        //Case 3
        Case newCase3 = new Case();
        //newCase3.Product_Purchase_Date__c 	   = Date.newInstance(2017, 08, 24);
        newCase3.Product_Total_Warranty_Days__c = 30;
        newCase3.Status 						   = '1. New';
        insert newCase3;
        
        //Case 4
        Case newCase4 = new Case();
        newCase4.Product_Purchase_Date__c 	   = Date.newInstance(2017, 08, 24);
        newCase4.Product_Total_Warranty_Days__c = 30;
        newCase4.Status 						   = '1. New';
        insert newCase4;
    }
}
