//Loops
- Two Types of Loops:
	- FOR EACH Loop. Requires a collection, like a list, and does a loop for each record in the collection.
	- FOR Loop. Doesn't require a collection, but defines an Integer i to run a specific number of iterations. Most commonly used in test classes.
  
 FOR EACH LOOP
 	- Iterates each record within a collection. 
 
	 List<Lead> leadList = new List<Lead>();
	 leadList.add('hatGirl');
	 leadList.add('bearMan');
	 leadList.add('theBoss');

	 for (Lead myLead : leadList) {
		//Set default field values
		myLead.Status = 'Open';
		myLead.LeadSource = 'Web';

		//Set anti-spam values
		myLead.DoNotCall = true;
		myLead.HasOptedOutOfFax = true;
		myLead.hasOptedOutOfEmail = true;
	 }
//THIS ONLY SETS VARIABLES IN APEX; THEY HAVE NOT BEEN SET IN THE DATABASE UNTIL DML STATEMENT IS MADE.



FOR LOOP
	- Used in test classes. Run something a certain amount of times by specifying a run condition (limit) and an increment.
	
	for (Integer = 1; i <= 10; i++) {
		Account acc = new Account();
		acc.Name = 'SFDC' + i;
		acc.Website = 'sfdc' + i + '.com';
		insert acc;
	}



COMMON LOOP TOOLS
	- break: break out of a loop and cancel future iterations. Use it in a for-each loop to look for a particular record.
	for (Case myCase : Trigger.new) {
		if (myCase.CaseNumber == '001') {
			importantCase = myCase;

			break;
		}
	}

	- continue: move on to the next iteration of the loop and skip the rest of the code block in that iteration.
	for (Case myCase : caseList) {
		if (myCase.Status != 'New') {
			continue;
		}
	}



DATA MANIPULATION LANGUAGE (DML)
- Basically a save button. If there is no DML, all changes to the record exist in APEX only.

- 3 Types of DML:
	- insert: Inserts a new SObject record. Can be of any time.
	- update: Updates an existing SObject record.
	- delete: Deletes an existing SObject record.
	
- 2 Ways to Use DML:
	- Single record DML: Save one record at a time.
	Case newCase = new Case();
	
	newCase.Subject = 'Bad code';
	newCase.Priority = 'High';
	
	insert newCase;
	
	
	- Multi-record DML: save multiple records at once, up to 200.
	List<Case> cases = new List<Case>();
	
	cases.add(myCase);
	cases.add(yourCase);
	
	delete cases;

- ALWAYS use DML, unless... the records are in Trigger.new, and you're in a "before" trigger. This is because these triggers run before the event that saves the action.

E.g. We need to use DML statement, because the record we are inserting is not part of Trigger.new (Trigger list contains any inserted accounts, but we actually want to make changes to a new Opportunity and then insert that).

trigger AutoCreateOpportunity on Account (after insert) {
	for (Account acc : Trigger.new) {
		Opportunity opp = new Opportunity();
		opp.Name = 'Big Deal';
		opp.CloseDate = Date.today().addMonths(3);
		opp.StageName = 'Prospecting';
		opp.AccountId = acc.Id;
		
		insert opp;
	}
}

E.g.2 Do not need DML. The record we use DML on is within the Trigger.new. If you update a Lead, it will do this stuff first, then it will automatically save.

trigger NeverCallCeos on Lead (before update) {
	for (Lead myLead : Trigger.new) {
		if (myLead.Title == 'CEO') {
			myLead.DoNotCall = true;
			update myLead;	//Do not need DML on this line
		}
	}
}

E.g.3. Yes, do need DML. All records entering the Trigger.new is a Contact. However, the trigger loop creates a new Task, which is a separate thing. The new "Task" and its set variables will float in APEX until it is DML inserted for each Contact updated.

trigger GovRecordChangeAlert on Contact (before update) {
	for (Contact myContact : Trigger.new) {
		if (myContact.Government_Record__c == true) {
			Task myTask = new Task();
			myTask.Subject = 'Government record modified';
			myTask.Description = 'Please verify updates.';
			MyTask.Status = 'Not Started';
			
			insert myTask;
		}
	}
}
